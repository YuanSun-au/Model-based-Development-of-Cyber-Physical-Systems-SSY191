component plant
%Plant of quadrocopter

inputs
   ctrl={[0;0;0;0],'N'}; %Thrust:left
end

outputs
    pos={x0(1:3,:),'m'}; %Position:right
    v = {x0(4:6,:), 'm/s' }; %Velocity:right
    a = {[0;0;0], 'm/s^2' }; %Acceleration:right
    
    angle  = {x0(7:9,:),'rad'};%Euler Angle:right
    dangle = {[0;0;0],'rad/s'};%Euler Angle Derivative:right
    
    w_b = {x0(10:12,:),'rad/s'};%Angular velocity:right
end

parameters
    m = {0.027,'kg'};%Mass
    g = {9.81,'m/s^2'};%Gravity
    d = {0.046,'m'};%Arm length
    k = {1e-9,'N/(rad/s)^2'};%Lift constant
    b = {2.75e-11,'N*m/(rad/s)^2'};%Drag constant
    x0 = {zeros(12,1), '1'};%Initial condition
end

parameters(Access=private)
    %Moment of inertia matrix
    Jx = {1.395e-5,'kg*m^2'};
    Jy = {1.436e-5,'kg*m^2'};
    Jz = {2.173e-5,'kg*m^2'};
    J_b = [Jx,0,0;0,Jy,0;0,0,Jz];
end

variables(Access=private)
    w = {zeros(3,1),'rad/s'};
    
    
    rotorspeed = {zeros(4,1),'rad/s'};
    
    rotx = {eye(3,3),'1'};
    roty = {eye(3,3),'1'};
    rotz = {eye(3,3),'1'};
    R_b2w = {eye(3,3),'1'};
    
    
    Tz_aer_drag = {zeros(4,1),'N*m'};
    Tx = {0,'N*m'};
    Ty = {0,'N*m'};
    Tz = {0,'N*m'};
    T_b = {zeros(3,1),'N*m'};
    
    
    T_angleder2w = {eye(3,3),'1'};
    
    phi   = {0,'rad'};
    theta = {0,'rad'};
    psi   = {0,'rad'};
end

equations
    
    % linear dynamics in world {W} coordinate system
%     m * a == -[0 0 m*g]' + R_b2w * [0 0 sum(ctrl)]';
    a == g*[0 0 0]';
    v.der   == a;
    pos.der == v;
    
    % rotor speed to thrust
    % ctrl == k * (rotorspeed).^2;
    rotorspeed == sqrt(abs(ctrl)/k);
    
    % torque in Z direction caused by the propellers aerodynamic drag
    Tz_aer_drag == b * (rotorspeed).^2;
    
    % Total torque in body {B} coordinate system
    Tx == d*cos(pi/4) * (ctrl(3) + ctrl(4) - ctrl(1) - ctrl(2));
    Ty == d*cos(pi/4) * (ctrl(2) + ctrl(3) - ctrl(1) - ctrl(4));
    Tz == - Tz_aer_drag(1) - Tz_aer_drag(3) + Tz_aer_drag(2) + Tz_aer_drag(4) ;
    T_b == [Tx Ty Tz]';
    
    % angular dynamics expressed in {B}
    J_b * w_b.der == cross( -w_b, J_b * w_b ) + T_b;
    
    % euler angles XYZ
    angle == [phi theta psi]';
        
    % rotation matrix body {B} to world {W} frame
    rotx  == [1 0        0; 
              0 cos(phi) -sin(phi);
              0 sin(phi) cos(phi)];
    roty  == [cos(theta)  0 sin(theta); 
              0           1 0; 
              -sin(theta) 0 cos(theta)];
    rotz  == [cos(psi) -sin(psi) 0; 
              sin(psi)  cos(psi) 0; 
              0         0        1];
    R_b2w == (rotx * roty * rotz);
    
    % rotation angular velocity - body {B} to world {W} frame
    w == R_b2w * w_b;
   
    % transformation matrix from euler angles derivative to angular velocity {W}
    %   the derivation of this matrix is found on the file 'calculate_T_angleder2w.m'
    %   for the XYZ euler sequence.
    T_angleder2w == [ 1,        0,            sin(theta)
                      0, cos(phi),  -cos(theta)*sin(phi)
                      0, sin(phi),   cos(phi)*cos(theta)];
    w == T_angleder2w * dangle;
    dangle == angle.der;
end
end



